<?xml version="1.0"?>
<project name="common" basedir="${base.dir}">
  <path id="compile.classpath" />

  <property name="src.folder" value="${base.dir}/${src.dir}" />
  <property name="test.folder" value="${base.dir}/${test.dir}" />
  <property name="lib.folder" value="${base.dir}/${lib.dir}" />

  <target name="clean" description="Remove generated files.">
    <delete dir="${build.dir}"/>
  </target>

  <target name="compile" description="Compile Java source.">
    <echo message="Compiling ${project}"/>
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="${src.folder}" debug="on" destdir="${build.dir}/classes" includeantruntime="false">
      <compilerarg value="-Xlint:all,-serial"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="test.compile" depends="compile" description="Compile test source.">
    <echo message="Compiling ${project} tests"/>
    <mkdir dir="${build.dir}/tests"/>
    <javac srcdir="${test.folder}" debug="on" destdir="${build.dir}/tests" includeantruntime="false">
      <classpath path="${build.dir}/classes"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="scala.compile" description="Compile Scala source.">
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${lib.folder}/scala-library-2.8.1.jar"/>
      </classpath>
    </taskdef>
    <echo message="Compiling ${project}"/>
    <scalac srcdir="${src.folder}" destdir="${build.dir}/classes" addParams="-make:changed" >
      <classpath refid="compile.classpath"/>
      <include name="**/*.scala" />
      <exclude name="**/*init.scala" />
    </scalac>
  </target>

  <target name="scala.test.compile" description="Compile Scala test source">
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${lib.folder}/scala-library-2.8.1.jar"/>
      </classpath>
    </taskdef>
    <echo message="Compiling ${project} tests"/>
    <scalac srcdir="${test.folder}" destdir="${build.dir}/tests" addParams="-make:changed" >
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement location="${build.dir}/classes"/>
      </classpath>
      <include name="**/*.scala" />
      <exclude name="**/*init.scala" />
    </scalac>
  </target>

  <target name="test" depends="test.compile" description="Execute Unit tests.">
    <echo message="Executing  ${project} unit tests"/>
    <mkdir dir="${build.dir}/${junit.dir}"/>
    <junit printsummary="yes"
         haltonerror="yes"
         haltonfailure="yes"
         fork="yes">
        <classpath>
          <path refid="compile.classpath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes" todir="${build.dir}/${junit.dir}">
          <fileset dir="${build.dir}/tests" >
            <include name="${unit.regex}.class"/>
            <exclude name="${func.regex}.class"/>
            <exclude name="**/AllTests.java"/>
          </fileset>
        </batchtest>
    </junit>
  </target>

  <target name="functional" depends="test.compile" description="Execute Functional tests.">
    <echo message="Executing ${project} functional tests"/>
    <mkdir dir="${build.dir}/${junit.dir}"/>
    <junit printsummary="yes"
         haltonerror="yes"
         haltonfailure="yes"
         fork="yes">
        <classpath>
          <path refid="compile.classpath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes" todir="${build.dir}/${junit.dir}">
          <fileset dir="${build.dir}/tests" >
            <include name="${func.regex}.class"/>
            <exclude name="**/AllTests.java"/>
          </fileset>
        </batchtest>
    </junit>
  </target>

  <target name="test.one" depends="test.compile,argument-checking" description="Run One Unit Test.">
    <echo message="Running test ${class} from ${project}"/>
    <mkdir dir="${build.dir}/${junit.dir}"/>
    <junit printsummary="no" haltonerror="yes" haltonfailure="yes" showoutput="no" fork="yes">
      <classpath>
        <path refid="compile.classpath"/>
        <pathelement location="${build.dir}/classes"/>
        <pathelement location="${build.dir}/tests"/>
      </classpath>
      <test todir="${build.dir}/${junit.dir}" name="${class}"/>
      <formatter usefile="false" type="plain"/>
    </junit>
  </target>

  <target name="jar" depends="compile">
    <echo message="Generating jar for ${project}"/>
    <mkdir dir="${build.dir}/dist" />
    <jar destfile="${build.dir}/dist/dbtune-${version}.jar" basedir="${build.dir}/classes" />
  </target>

  <target name="argument-checking" >
    <fail message="No class variable defined" unless="class" />
    <available classname="${class}"
          classpath="${build.dir}/tests/"
          property="class.present" />
    <fail message="Class ${class} doesn't exist" unless="class.present" />
  </target>

  <target name="source.jar" description="Create a .jar file with sources">
    <mkdir dir="${build.dir}"/>
    <zip destfile="${build.dir}/${project}-${version}-src.jar" >
      <fileset dir="${src.folder}"/>
    </zip>
  </target>

  <target name="javadoc" description="Generate Javadocs.">
      <mkdir dir="${build.dir}/javadoc"/>
      <javadoc sourcepath="${src.folder}"
               packagenames="*"
               excludepackagenames="tests"
               destdir="${build.dir}/javadoc"
               author="true"
               maxmemory="512M"
               protected="true" windowtitle="${project}-${version} API">
          <sourcepath>
            <pathelement location="${src.folder}"/>
          </sourcepath>
          <classpath refid="compile.classpath"/>
        </javadoc>
    </target>
</project>
