<?xml version="1.0"?>

<project name="common">

  <property file="dbtune.properties"/>

  <!-- can be overridden at the command line with -Dversion=
       or in IDEA, in the ant properties dialog -->
  <property name="version" value="${version}"/>

  <target name="compile" description="Compile Java source.">
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="${src.dir}"
         debug="on"
         destdir="${build.dir}/classes"
         source="1.5" target="1.5" includeantruntime="false" excludes="edu/ucsc/satuning/**/*">
      <compilerarg value="-Xlint:all,-serial"/>
      <classpath refid="compile.classpath"/>
    </javac>
    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}" excludes="**/*.java,edu/ucsc/satuning/**/*"/>
    </copy>
  </target>

  <target name="test.compile"
      depends="compile"
      description="Compile test source.">
    <mkdir dir="${build.dir}/tests"/>
    <javac srcdir="${test.dir}"
         debug="on"
         destdir="${build.dir}/tests"
         source="1.5" target="1.5" includeantruntime="false" excludes="edu/ucsc/satuning/**/*">
      <classpath path="${build.dir}/classes"/>
      <classpath path="${build.dir}/tests"/>
      <classpath refid="compile.classpath"/>
    </javac>
    <copy toDir="${build.dir}/tests">
      <fileset dir="${test.dir}" excludes="**/*.java,edu/ucsc/satuning/**/*"/>
    </copy>
  </target>

  <target name="test"
      depends="test.compile"
      description="Execute Unit tests.">
    <echo message="Executing Unit tests"/>
    <junit printsummary="yes"
         haltonerror="yes"
         haltonfailure="yes"
         fork="yes">
        <classpath>
          <path refid="compile.classpath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes"
                   todir="${build.dir}/${junit.out.dir}">
          <fileset dir="${test.dir}" excludes="edu/ucsc/satuning/**/*">
            <include name="${unit.test.pat}"/>
            <exclude name="**/AllTests.java"/>
          </fileset>
        </batchtest>
    </junit>
  </target>

  <target name="test.functional"
      depends="test.compile"
      description="Execute Functional tests.">
    <echo message="Executing Functional tests"/>
    <junit printsummary="yes"
         haltonerror="yes"
         haltonfailure="yes"
         fork="yes">
        <classpath>
          <path refid="compile.classpath"/>
          <pathelement location="${build.dir}/classes"/>
          <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes"
                   todir="${build.dir}/${junit.out.dir}">
          <fileset dir="${test.dir}">
            <include name="${functional.test.pat}"/>
            <exclude name="**/AllTests.java"/>
          </fileset>
        </batchtest>
    </junit>
  </target>

  <target name="test.report" depends="test.compile" description="Execute and then Print Unit tests.">
    <echo message="Executing unit tests (Generate Exec. Report once finished)"/>
    <mkdir dir="${build.dir}/${junit.out.dir}"/>
    <junit printsummary="yes"
           haltonerror="yes"
           haltonfailure="yes"
           fork="yes">
        <classpath>
            <path refid="compile.classpath"/>
            <pathelement location="${build.dir}/classes"/>
            <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes" todir="${build.dir}/${junit.out.dir}">
            <fileset dir="${test.dir}">
                <include name="${unit.test.pat}"/>
                <exclude name="**/AllTests.java"/>
        </fileset>
    </batchtest>
    <formatter type="xml" />
    </junit>
  </target>

  <target name="test.functional.report" depends="test.compile" description="Execute and then Print Functional tests.">
    <echo message="Executing Functional tests (Generate Exec. Report once finished)"/>
    <mkdir dir="${build.dir}/${junit.out.dir}"/>
    <junit printsummary="yes"
           haltonerror="yes"
           haltonfailure="yes"
           fork="yes">
        <classpath>
            <path refid="compile.classpath"/>
            <pathelement location="${build.dir}/classes"/>
            <pathelement location="${build.dir}/tests"/>
        </classpath>
        <batchtest fork="yes" todir="${build.dir}/${junit.out.dir}">
            <fileset dir="${test.dir}">
                <include name="${functional.test.pat}"/>
                <exclude name="**/AllTests.java"/>
        </fileset>
    </batchtest>
    <formatter type="xml" />
    </junit>
    <junitreport todir="${build.dir}/${junit.out.dir}">
      <fileset dir="${build.dir}/${junit.out.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${build.dir}/${junit.out.dir}" />
    </junitreport>
  </target>

  <target name="test.single"
      depends="test.compile,argument-checking"
      description="Execute Single Unit Test.">
    <echo message="running test ${class}"/>
    <java fork="true"
        classname="org.junit.runner.JUnitCore"
        failonerror="true"
        taskname="junit">
      <classpath>
        <pathelement location="${build.dir}/tests"/>
        <pathelement location="${build.dir}/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${class}"/>
    </java>
  </target>

  <target name="argument-checking" >
      <fail message="No class variable defined" unless="class" />
      <available classname="${class}"
            classpath="${build.dir}/tests/"
            property="class.present" />
      <fail message="Class ${class} doesn't exist" unless="class.present" />
  </target>

  <target name="clean"
      description="Remove generated files.">
    <delete dir="${build.dir}"/>
  </target>

  <target name="source.jar"
      description="Create a .jar file with sources">
    <mkdir dir="${build.dir}"/>
    <zip destfile="${build.dir}/${project.name}-${version}-src.jar" excludes="edu/ucsc/satuning/**/*">
      <fileset dir="${src.dir}"/>
    </zip>
  </target>

  <target name="distjars"
      depends="source.jar, jar"
      description="Build jar files"/>


  <target name="test.compile-with-deps" depends="test.compile"
	  description="Build a jar of tests with spi refocused.">
  	<mkdir dir="${build.dir}/dist"/>
    <dirname property="common.basedir" file="${ant.file.common}"/>
    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
        classpath="${common.basedir}/lib/jarjar-snapshot.jar"/>
    <jarjar jarfile="${build.dir}/${ant.project.name}-${version}-tests.jar">
      <fileset dir="${build.dir}/tests"/>
      <rule pattern="edu.ucsc.dbtune.spi.*" result="edu.ucsc.dbtune.spi.$@1"/>
      <rule pattern="edu.ucsc.dbtune.spi.core.**.*" result="edu.ucsc.dbtune.spi.core.@1.$@2"/>
      <keep pattern="edu.ucsc.dbtune.**"/>
    </jarjar>
  </target>

  <target name="jar.withdeps" depends="compile"
      description="Build jar with dependencies embedded.">
    <mkdir dir="${build.dir}/dist"/>
    <dirname property="common.basedir" file="${ant.file.common}"/>
    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
        classpath="${common.basedir}/lib/jarjar-snapshot.jar"/>
    <jarjar jarfile="${build.dir}/${ant.project.name}-with-deps.jar">
      <fileset dir="${build.dir}/classes"/>
      <rule pattern="edu.ucsc.dbtune.spi.*" result="edu.ucsc.dbtune.spi.$@1"/>
      <rule pattern="edu.ucsc.dbtune.spi.core.**.*" result="edu.ucsc.dbtune.spi.core.@1.$@2"/>
      <keep pattern="edu.ucsc.dbtune.**"/>
    </jarjar>
  </target>
</project>