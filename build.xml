<?xml version="1.0"?>
<project name="dbtune" default="compile">

  <import file="tasks.xml" />

  <target name="jar" depends="compile">
    <mkdir dir="${build.dir}/dist" />
    <jar   destfile="${build.dir}/dist/dbtune-${version}.jar" basedir="${build.dir}/classes" />
  </target>

  <target name="jar.all" depends="compile.all">
    <mkdir dir="${build.dir}/dist"/>
    <jar   destfile="${build.dir}/dist/dbtune-${version}.jar" basedir="${build.dir}/classes" />
  </target>

  <target name="dist" depends="jar, javadoc">
    <copy toDir="${build.dir}/dist">
      <fileset dir="${lib.dir}" includes="*.jar" />
    </copy>
    <copy toDir="${build.dir}/dist">
      <fileset dir="${build.dir}" includes="manual/**/*" />
      <fileset dir="${build.dir}" includes="javadoc/**/*" />
    </copy>
    <zip destfile="${build.dir}/dbtune-${version}.zip" basedir="${build.dir}/dist" />
    <zip destfile="${build.dir}/dbtune-${version}-src.zip"
         basedir="."
         excludes="www/**/*,www,build/**/*, javadoc/**/*, build,SVN,
                   SVN/**/*,**/SVN,CVS,CVS/**/*,**/CVS" />
  </target>

  <target name="javadoc" description="Generate Javadoc">
    <mkdir   dir="${build.dir}/javadoc" />
    <javadoc sourcepath="${src.dir}"
             packagenames="*"
             excludepackagenames="tests"
             destdir="${build.dir}/javadoc"
             author="true"
             private="true"
             windowtitle="DbTune 0.1 API">
      <sourcepath>
        <pathelement location="${cli.src.dir}" />
        <pathelement location="${ml.src.dir}" />
          <pathelement location="${inum.src.dir}" />
        <pathelement location="${src.dir}" />
      </sourcepath>
      <classpath refid="compile.classpath" />
    </javadoc>
  </target>

  <target name="clean.all" depends="clean" description="Remove generated files">
    <ant antfile="extensions/cli/build.xml" target="clean" inheritall="false" />
    <ant antfile="extensions/ml/build.xml" target="clean" inheritall="false" />
    <ant antfile="extensions/inum/build.xml" target="clean" inheritall="false" />
  </target>

  <target name="compile.all" depends="compile" description="compile all source">
    <ant antfile="extensions/cli/build.xml" target="compile" inheritAll="false" />
    <ant antfile="extensions/ml/build.xml" target="compile" inheritAll="false" />
    <ant antfile="extensions/inum/build.xml" target="compile" inheritAll="false" />
  </target>

  <target name="compile.all.tests" depends="compile.tests">
    <ant antfile="extensions/cli/build.xml" target="compile.tests" inheritAll="false" />
    <ant antfile="extensions/ml/build.xml" target="compile.tests" inheritAll="false" />
  </target>

  <target name="test.all.unit" depends="test.unit">
    <ant antfile="extensions/cli/build.xml" target="test.unit" inheritAll="false" />
    <ant antfile="extensions/ml/build.xml" target="test.unit" inheritAll="false" />
    <ant antfile="extensions/inum/build.xml" target="test.unit" inheritAll="false" />
  </target>

  <target name="test.all.functional" depends="test.functional">
    <ant antfile="extensions/cli/build.xml" target="test.functional" inheritAll="false" />
    <ant antfile="extensions/ml/build.xml" target="test.functional" inheritAll="false" />
    <ant antfile="extensions/inum/build.xml" target="test.functional" inheritAll="false" />
  </target>

  <target name="test.unit.and.functional" depends="test.unit,test.functional" />

  <target name="test.all.unit.and.functional" depends="test.all.unit,test.all.functional" />

  <target name="test.report"
          depends="test.unit.and.functional"
          description="Execute unit and functional tests and generate an HTML report.">
    <junitreport todir="${build.dir}/${junit.out.dir}">
      <fileset dir="${build.dir}/${junit.out.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${build.dir}/${junit.out.dir}" />
    </junitreport>
  </target>

  <target name="test.all.report"
          depends="test.all.unit.and.functional"
          description="Execute ALL unit and functional tests and generate an HTML report.">
    <junitreport todir="${build.dir}/${junit.out.dir}">
      <fileset dir="${build.dir}/${junit.out.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${build.dir}/${junit.out.dir}" />
    </junitreport>
  </target>
</project>
